#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("scan2dine-be:server");
var http = require("http");
var { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
/**
 * Integrate Socket.IO
 */

var io = new Server(server, {
  cors: {
    origin: "*", // Cấu hình CORS, thay đổi theo nhu cầu của bạn
    methods: ["GET", "POST", "DELETE", "PUT", "PATCH"],
  },
});

// Xử lý sự kiện Socket.IO
io.on("connection", (socket) => {
  console.log("Người dùng đã kết nối:", socket.id);

  // Xử lý sự kiện nhận tin nhắn từ client
  socket.on("message", (msg) => {
    console.log("Tin nhắn:", msg);
    // Phát lại tin nhắn cho tất cả client
    io.emit("message", msg);
  });

  // Xử lý sự kiện ngắt kết nối
  socket.on("disconnect", () => {
    console.log("Người dùng đã ngắt kết nối:", socket.id);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

//Hiếu chỉnh chổ ni thêm '0,0,0,0'
server.listen(port, "0.0.0.0", () => {
  console.log("Server is running on port: " + port);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
