#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
var debug = require("debug")("be-scan2dine:server");
var http = require("http");
var { Server } = require("socket.io");
var socketUtils = require('../utils/socketUtils');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Integrate Socket.IO
 */
var io = new Server(server, {
  cors: {
    origin: "*", // Thay đổi theo nhu cầu
    methods: ["GET", "POST", "DELETE", "PUT", "PATCH"],
  },
});
app.set('io', io);

// Xử lý sự kiện Socket.IO
io.on("connection", (socket) => {
  console.log("Người dùng đã kết nối:", socket.id);

  socket.on("message", (msg) => {
    try {
      if (!msg) {
        console.error("Tin nhắn không hợp lệ:", msg);
        return;
      }
      console.log("Tin nhắn:", msg);
      io.emit("message", msg);
    } catch (error) {
      console.error("Lỗi xử lý tin nhắn:", error);
    }
  });

  socket.on("disconnect", () => {
    console.log("Người dùng đã ngắt kết nối:", socket.id);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
  console.log("Server is running on port: " + port);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;
  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}